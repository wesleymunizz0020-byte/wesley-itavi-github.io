<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Itavig - Gerenciador de Clientes</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .overdue {
            background-color: #fee2e2;
            border-left: 4px solid #ef4444;
        }
        /* Custom scrollbar for table */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #e5e7eb;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #9ca3af;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }
    </style>
</head>
<body class="p-4 md:p-8">

    <div class="max-w-6xl mx-auto bg-white rounded-xl shadow-lg p-6 md:p-10">

        <!-- Header -->
        <header class="mb-8 text-center">
            <h1 class="text-3xl md:text-4xl font-extrabold text-gray-800">Itavig</h1>
            <p class="text-lg text-gray-600 mt-2">Gerenciamento de Clientes e Pagamentos</p>
        </header>

        <!-- Main App Content -->
        <div id="appContent">
            <!-- New Client Form -->
            <section class="bg-gray-50 p-6 rounded-lg shadow-inner mb-8">
                <h2 class="text-2xl font-bold text-gray-700 mb-4">Adicionar Novo Cliente</h2>
                <form id="clientForm" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <input type="text" id="clientName" placeholder="Nome do Cliente" required
                           class="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    <input type="number" id="serviceValue" placeholder="Valor (R$)" step="0.01" required
                           class="p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                    <div class="relative">
                        <input type="date" id="dueDate" placeholder="Data de Vencimento" required
                               class="p-3 border border-gray-300 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <span class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm">Vencimento</span>
                    </div>
                    <button type="submit"
                            class="bg-indigo-600 text-white p-3 rounded-lg font-semibold hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        Adicionar Cliente
                    </button>
                </form>
            </section>

            <!-- Search and Client Count -->
            <section class="flex flex-col md:flex-row justify-between items-center mb-6">
                <div class="w-full md:w-1/2 mb-4 md:mb-0">
                    <input type="text" id="searchInput" placeholder="Buscar por cliente..."
                           class="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                </div>
                <div class="text-gray-700 text-center md:text-right">
                    <span class="font-bold text-xl" id="clientCount">0</span>
                    <span class="text-lg"> clientes registrados</span>
                </div>
            </section>

            <!-- Clients Table -->
            <section class="overflow-x-auto rounded-lg shadow-md border border-gray-200">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cliente</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valor</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vencimento</th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
                        </tr>
                    </thead>
                    <tbody id="clientsTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Client data will be inserted here by JavaScript -->
                    </tbody>
                </table>
            </section>
        </div>
        
        <!-- Modal for confirmation/messages -->
        <div id="modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center p-4">
            <div class="bg-white rounded-lg shadow-2xl p-6 max-w-sm w-full text-center">
                <p id="modalMessage" class="text-gray-800 text-lg mb-4"></p>
                <button id="modalConfirmBtn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">OK</button>
            </div>
        </div>

    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, doc, setDoc, deleteDoc, onSnapshot, query } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        
        // Use a self-invoking function to avoid global variable pollution.
        (function() {
            // Get references to all necessary DOM elements.
            const clientForm = document.getElementById('clientForm');
            const clientNameInput = document.getElementById('clientName');
            const serviceValueInput = document.getElementById('serviceValue');
            const dueDateInput = document.getElementById('dueDate');
            const clientsTableBody = document.getElementById('clientsTableBody');
            const clientCountSpan = document.getElementById('clientCount');
            const searchInput = document.getElementById('searchInput');
            const modal = document.getElementById('modal');
            const modalMessage = document.getElementById('modalMessage');
            const modalConfirmBtn = document.getElementById('modalConfirmBtn');

            let db, auth;
            let currentUserId = null;
            let clients = [];
            
            // A function to show a custom modal instead of an alert.
            const showModal = (message) => {
                modalMessage.textContent = message;
                modal.classList.remove('hidden');
                modal.classList.add('flex');
            };

            // A function to hide the modal.
            const hideModal = () => {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
            };

            // Event listener for the modal's OK button.
            modalConfirmBtn.addEventListener('click', hideModal);

            // Function to format dates as dd/mm/yyyy.
            const formatDate = (dateString) => {
                const date = new Date(dateString);
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                return ${day}/${month}/${year};
            };
            
            // Function to render the client table.
            const renderClients = (filterQuery = '') => {
                clientsTableBody.innerHTML = '';
                let visibleCount = 0;

                const filteredClients = clients.filter(client =>
                    client.name.toLowerCase().includes(filterQuery.toLowerCase())
                );

                filteredClients.forEach(client => {
                    visibleCount++;
                    const row = document.createElement('tr');
                    
                    const today = new Date();
                    const dueDate = new Date(client.dueDate);
                    const isOverdue = dueDate < today && client.status !== 'paid';

                    if (isOverdue) {
                        row.classList.add('overdue');
                    }
                    
                    row.innerHTML += <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${client.name}</td>;
                    
                    row.innerHTML += <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">R$ ${client.value.toFixed(2)}</td>;
                    
                    row.innerHTML += <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatDate(client.dueDate)}</td>;
                    
                    const statusText = client.status === 'paid' ? 'Pago' : 'Não Pago';
                    const statusColor = client.status === 'paid' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800';
                    row.innerHTML += `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-center">
                            <button data-id="${client.id}" class="toggle-status px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${statusColor}">
                                ${statusText}
                            </button>
                        </td>
                    `;
                    
                    row.innerHTML += `
                        <td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                            <button data-id="${client.id}" class="delete-client text-red-600 hover:text-red-900 transition-colors">
                                Excluir
                            </button>
                        </td>
                    `;
                    
                    clientsTableBody.appendChild(row);
                });

                clientCountSpan.textContent = visibleCount;
            };

            // Handle client form submission
            clientForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                try {
                    const newClient = {
                        name: clientNameInput.value,
                        value: parseFloat(serviceValueInput.value),
                        dueDate: dueDateInput.value,
                        status: 'unpaid',
                        createdAt: new Date(),
                    };
                    
                    const collectionPath = /artifacts/${appId}/users/${currentUserId}/clientes;
                    await addDoc(collection(db, collectionPath), newClient);
                    
                    clientForm.reset();
                    showModal('Cliente adicionado com sucesso!');
                } catch (error) {
                    console.error("Erro ao adicionar cliente:", error);
                    showModal('Erro ao adicionar cliente. Tente novamente.');
                }
            });
            
            // Handle table clicks for toggling status and deleting clients.
            clientsTableBody.addEventListener('click', async (e) => {
                const target = e.target;
                
                if (target.classList.contains('toggle-status')) {
                    const id = target.dataset.id;
                    const clientRef = doc(db, /artifacts/${appId}/users/${currentUserId}/clientes/${id});
                    const client = clients.find(c => c.id === id);

                    if (client) {
                        try {
                            const newStatus = client.status === 'paid' ? 'unpaid' : 'paid';
                            await setDoc(clientRef, { status: newStatus }, { merge: true });
                        } catch (error) {
                            console.error("Erro ao atualizar o status:", error);
                            showModal('Erro ao atualizar o status. Tente novamente.');
                        }
                    }
                } else if (target.classList.contains('delete-client')) {
                    const id = target.dataset.id;
                    const clientRef = doc(db, /artifacts/${appId}/users/${currentUserId}/clientes/${id});
                    try {
                        await deleteDoc(clientRef);
                        showModal('Cliente excluído com sucesso!');
                    } catch (error) {
                        console.error("Erro ao excluir cliente:", error);
                        showModal('Erro ao excluir cliente. Tente novamente.');
                    }
                }
            });

            // Handle search input.
            searchInput.addEventListener('input', (e) => {
                renderClients(e.target.value);
            });

            // Main initialization function
            const init = () => {
                try {
                    const app = initializeApp(firebaseConfig);
                    auth = getAuth(app);
                    db = getFirestore(app);
                    
                    // Sign in anonymously to get a user ID
                    signInAnonymously(auth).then((result) => {
                        currentUserId = result.user.uid;
                        console.log(Signed in anonymously with UID: ${currentUserId});

                        const q = query(collection(db, /artifacts/${appId}/users/${currentUserId}/clientes));
                        onSnapshot(q, (querySnapshot) => {
                            clients = [];
                            querySnapshot.forEach((doc) => {
                                clients.push({ id: doc.id, ...doc.data() });
                            });
                            clients.sort((a, b) => (a.createdAt.toDate() > b.createdAt.toDate() ? 1 : -1));
                            renderClients(searchInput.value);
                        });
                    }).catch((error) => {
                        console.error("Erro na autenticação anónima:", error);
                        showModal('Erro ao iniciar o aplicativo. Por favor, recarregue a página.');
                    });

                } catch (error) {
                    console.error("Erro na inicialização do Firebase:", error);
                    showModal('Erro ao iniciar o aplicativo. Verifique sua conexão.');
                }
            };
            
            init();

        })();
    </script>
</body>
</html>